var r={windows:!0,mac:!0,linux:!0,ios:!1,android:!1},l={windows:["lights_mon_up","lights_mon_down","lights_kbd_toggle","lights_kbd_up","lights_kbd_down"],mac:["printscreen","insert"],linux:["numpad_0","numpad_1","numpad_2","numpad_3","numpad_4","numpad_5","numpad_6","numpad_7","numpad_8","numpad_9"]},a={linux:["audio_rewind","audio_forward","audio_repeat","audio_random"]};var c=["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","`","-","=","[","]","\\",";","'",",",".","/","backspace","delete","enter","tab","escape","up","down","right","left","home","end","pageup","pagedown","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","command","alt","control","shift","right_shift","space","printscreen","insert","audio_mute","audio_vol_down","audio_vol_up","audio_play","audio_stop","audio_pause","audio_prev","audio_next","audio_rewind","audio_forward","audio_repeat","audio_random","numpad_0","numpad_1","numpad_2","numpad_3","numpad_4","numpad_5","numpad_6","numpad_7","numpad_8","numpad_9","lights_mon_up","lights_mon_down","lights_kbd_toggle","lights_kbd_up","lights_kbd_down"];function p(){var n=window.navigator.userAgent,t=window.navigator?.userAgentData?.platform||window.navigator.platform,s=["Macintosh","MacIntel","MacPPC","Mac68K","darwin","macOS"],i=["Win32","Win64","Windows","WinCE"],o=["iPhone","iPad","iPod"],e=t;return s.indexOf(t)!==-1?"mac":o.indexOf(t)!==-1?"ios":i.indexOf(t)!==-1?"windows":/Android/.test(n)?"android":/Linux/.test(t)?"linux":e}var d=p(),w=Object.entries(r).filter(([n,t])=>n!==d&&t).map(([n])=>n),u=r[d]?[...c,...a[d]??[]].filter(n=>!l[d]?.includes(n)&&!w.find(t=>a[t]?.includes(n))):[],f=class{constructor(t="localhost",s=8765){this.status="disconnected";this.validMessages=u;this.#t=[];this.connect=(t=this.host,s=this.port)=>{if(this.status==="disconnected"){this.host=t,this.port=s;let i=`ws://${t}:${s}`;console.warn(`Trying to connect to ${i}`);let o=new WebSocket(i);this.status="connecting",o.onmessage=e=>this.onmessage?this.onmessage.call(this.ws,e):void 0,o.addEventListener("open",e=>{this.ws=o,console.warn(`Connected to ${i}`),this.status="connected",this.#t.forEach(h=>this.send(h)),this.#t=[],this.onopen&&this.onopen.call(this.ws,e)}),o.addEventListener("close",e=>{console.warn(`Disconnected from ${i}`),this.status="disconnected",this.onclose&&this.onclose.call(this.ws,e)}),setTimeout(()=>{this.status==="connecting"&&o.close()},2e3)}};this.disconnect=()=>{this.status==="connected"&&(this.status="disconnecting",this.ws.close())};this.send=t=>{if(this.status==="connected"){if(!u.includes(t)&&(t===" "&&(t="space"),t==="Enter"&&(t="enter"),t==="ArrowUp"&&(t="up"),t==="ArrowDown"&&(t="down"),t==="ArrowLeft"&&(t="left"),t==="ArrowRight"&&(t="right"),!u.includes(t))){console.warn(`${t} is not a valid key for ${d}`);return}typeof t=="object"&&(t=JSON.stringify(t)),this.ws.send(t)}else this.status==="connecting"&&this.#t.push(t)};this.host=t,this.port=s}#t;#n;get onmessage(){return this.#n}set onmessage(t){this.#n=t}#o;get onopen(){return this.#o}set onopen(t){this.#o=t}#e;get onclose(){return this.#e}set onclose(t){this.#e=t}};export{f as Client,c as allKeys};
